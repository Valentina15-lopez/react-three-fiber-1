{"ast":null,"code":"import { Face3 } from \"../../../build/three.module.js\";\n/**\n * Break faces with edges longer than maxEdgeLength\n * - not recursive\n */\n\nvar TessellateModifier = function (maxEdgeLength) {\n  this.maxEdgeLength = maxEdgeLength;\n};\nTessellateModifier.prototype.modify = function (geometry) {\n  var edge;\n  var faces = [];\n  var faceVertexUvs = [];\n  var maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n  for (var i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\n    faceVertexUvs[i] = [];\n  }\n  for (var i = 0, il = geometry.faces.length; i < il; i++) {\n    var face = geometry.faces[i];\n    if (face instanceof Face3) {\n      var a = face.a;\n      var b = face.b;\n      var c = face.c;\n      var va = geometry.vertices[a];\n      var vb = geometry.vertices[b];\n      var vc = geometry.vertices[c];\n      var dab = va.distanceToSquared(vb);\n      var dbc = vb.distanceToSquared(vc);\n      var dac = va.distanceToSquared(vc);\n      if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n        var m = geometry.vertices.length;\n        var triA = face.clone();\n        var triB = face.clone();\n        if (dab >= dbc && dab >= dac) {\n          var vm = va.clone();\n          vm.lerp(vb, 0.5);\n          triA.a = a;\n          triA.b = m;\n          triA.c = c;\n          triB.a = m;\n          triB.b = b;\n          triB.c = c;\n          if (face.vertexNormals.length === 3) {\n            var vnm = face.vertexNormals[0].clone();\n            vnm.lerp(face.vertexNormals[1], 0.5);\n            triA.vertexNormals[1].copy(vnm);\n            triB.vertexNormals[0].copy(vnm);\n          }\n          if (face.vertexColors.length === 3) {\n            var vcm = face.vertexColors[0].clone();\n            vcm.lerp(face.vertexColors[1], 0.5);\n            triA.vertexColors[1].copy(vcm);\n            triB.vertexColors[0].copy(vcm);\n          }\n          edge = 0;\n        } else if (dbc >= dab && dbc >= dac) {\n          var vm = vb.clone();\n          vm.lerp(vc, 0.5);\n          triA.a = a;\n          triA.b = b;\n          triA.c = m;\n          triB.a = m;\n          triB.b = c;\n          triB.c = a;\n          if (face.vertexNormals.length === 3) {\n            var vnm = face.vertexNormals[1].clone();\n            vnm.lerp(face.vertexNormals[2], 0.5);\n            triA.vertexNormals[2].copy(vnm);\n            triB.vertexNormals[0].copy(vnm);\n            triB.vertexNormals[1].copy(face.vertexNormals[2]);\n            triB.vertexNormals[2].copy(face.vertexNormals[0]);\n          }\n          if (face.vertexColors.length === 3) {\n            var vcm = face.vertexColors[1].clone();\n            vcm.lerp(face.vertexColors[2], 0.5);\n            triA.vertexColors[2].copy(vcm);\n            triB.vertexColors[0].copy(vcm);\n            triB.vertexColors[1].copy(face.vertexColors[2]);\n            triB.vertexColors[2].copy(face.vertexColors[0]);\n          }\n          edge = 1;\n        } else {\n          var vm = va.clone();\n          vm.lerp(vc, 0.5);\n          triA.a = a;\n          triA.b = b;\n          triA.c = m;\n          triB.a = m;\n          triB.b = b;\n          triB.c = c;\n          if (face.vertexNormals.length === 3) {\n            var vnm = face.vertexNormals[0].clone();\n            vnm.lerp(face.vertexNormals[2], 0.5);\n            triA.vertexNormals[2].copy(vnm);\n            triB.vertexNormals[0].copy(vnm);\n          }\n          if (face.vertexColors.length === 3) {\n            var vcm = face.vertexColors[0].clone();\n            vcm.lerp(face.vertexColors[2], 0.5);\n            triA.vertexColors[2].copy(vcm);\n            triB.vertexColors[0].copy(vcm);\n          }\n          edge = 2;\n        }\n        faces.push(triA, triB);\n        geometry.vertices.push(vm);\n        for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n          if (geometry.faceVertexUvs[j].length) {\n            var uvs = geometry.faceVertexUvs[j][i];\n            var uvA = uvs[0];\n            var uvB = uvs[1];\n            var uvC = uvs[2];\n\n            // AB\n\n            if (edge === 0) {\n              var uvM = uvA.clone();\n              uvM.lerp(uvB, 0.5);\n              var uvsTriA = [uvA.clone(), uvM.clone(), uvC.clone()];\n              var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()];\n\n              // BC\n            } else if (edge === 1) {\n              var uvM = uvB.clone();\n              uvM.lerp(uvC, 0.5);\n              var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n              var uvsTriB = [uvM.clone(), uvC.clone(), uvA.clone()];\n\n              // AC\n            } else {\n              var uvM = uvA.clone();\n              uvM.lerp(uvC, 0.5);\n              var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n              var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()];\n            }\n            faceVertexUvs[j].push(uvsTriA, uvsTriB);\n          }\n        }\n      } else {\n        faces.push(face);\n        for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n          faceVertexUvs[j].push(geometry.faceVertexUvs[j][i]);\n        }\n      }\n    }\n  }\n  geometry.faces = faces;\n  geometry.faceVertexUvs = faceVertexUvs;\n};\nexport { TessellateModifier };","map":{"version":3,"names":["Face3","TessellateModifier","maxEdgeLength","prototype","modify","geometry","edge","faces","faceVertexUvs","maxEdgeLengthSquared","i","il","length","face","a","b","c","va","vertices","vb","vc","dab","distanceToSquared","dbc","dac","m","triA","clone","triB","vm","lerp","vertexNormals","vnm","copy","vertexColors","vcm","push","j","jl","uvs","uvA","uvB","uvC","uvM","uvsTriA","uvsTriB"],"sources":["/home/valentinalopez/Development/react-three-fiber-1/client/node_modules/drei/node_modules/three/examples/jsm/modifiers/TessellateModifier.js"],"sourcesContent":["import {\n\tFace3\n} from \"../../../build/three.module.js\";\n/**\n * Break faces with edges longer than maxEdgeLength\n * - not recursive\n */\n\nvar TessellateModifier = function ( maxEdgeLength ) {\n\n\tthis.maxEdgeLength = maxEdgeLength;\n\n};\n\nTessellateModifier.prototype.modify = function ( geometry ) {\n\n\tvar edge;\n\n\tvar faces = [];\n\tvar faceVertexUvs = [];\n\tvar maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n\n\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\tfaceVertexUvs[ i ] = [];\n\n\t}\n\n\tfor ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {\n\n\t\tvar face = geometry.faces[ i ];\n\n\t\tif ( face instanceof Face3 ) {\n\n\t\t\tvar a = face.a;\n\t\t\tvar b = face.b;\n\t\t\tvar c = face.c;\n\n\t\t\tvar va = geometry.vertices[ a ];\n\t\t\tvar vb = geometry.vertices[ b ];\n\t\t\tvar vc = geometry.vertices[ c ];\n\n\t\t\tvar dab = va.distanceToSquared( vb );\n\t\t\tvar dbc = vb.distanceToSquared( vc );\n\t\t\tvar dac = va.distanceToSquared( vc );\n\n\t\t\tif ( dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared ) {\n\n\t\t\t\tvar m = geometry.vertices.length;\n\n\t\t\t\tvar triA = face.clone();\n\t\t\t\tvar triB = face.clone();\n\n\t\t\t\tif ( dab >= dbc && dab >= dac ) {\n\n\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\tvm.lerp( vb, 0.5 );\n\n\t\t\t\t\ttriA.a = a;\n\t\t\t\t\ttriA.b = m;\n\t\t\t\t\ttriA.c = c;\n\n\t\t\t\t\ttriB.a = m;\n\t\t\t\t\ttriB.b = b;\n\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 1 ], 0.5 );\n\n\t\t\t\t\t\ttriA.vertexNormals[ 1 ].copy( vnm );\n\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 1 ], 0.5 );\n\n\t\t\t\t\t\ttriA.vertexColors[ 1 ].copy( vcm );\n\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tedge = 0;\n\n\t\t\t\t} else if ( dbc >= dab && dbc >= dac ) {\n\n\t\t\t\t\tvar vm = vb.clone();\n\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\ttriA.a = a;\n\t\t\t\t\ttriA.b = b;\n\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\ttriB.a = m;\n\t\t\t\t\ttriB.b = c;\n\t\t\t\t\ttriB.c = a;\n\n\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\tvar vnm = face.vertexNormals[ 1 ].clone();\n\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\n\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\t\t\t\t\t\ttriB.vertexNormals[ 1 ].copy( face.vertexNormals[ 2 ] );\n\t\t\t\t\t\ttriB.vertexNormals[ 2 ].copy( face.vertexNormals[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\tvar vcm = face.vertexColors[ 1 ].clone();\n\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\n\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\t\t\t\t\t\ttriB.vertexColors[ 1 ].copy( face.vertexColors[ 2 ] );\n\t\t\t\t\t\ttriB.vertexColors[ 2 ].copy( face.vertexColors[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tedge = 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\ttriA.a = a;\n\t\t\t\t\ttriA.b = b;\n\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\ttriB.a = m;\n\t\t\t\t\ttriB.b = b;\n\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tedge = 2;\n\n\t\t\t\t}\n\n\t\t\t\tfaces.push( triA, triB );\n\t\t\t\tgeometry.vertices.push( vm );\n\n\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tif ( geometry.faceVertexUvs[ j ].length ) {\n\n\t\t\t\t\t\tvar uvs = geometry.faceVertexUvs[ j ][ i ];\n\n\t\t\t\t\t\tvar uvA = uvs[ 0 ];\n\t\t\t\t\t\tvar uvB = uvs[ 1 ];\n\t\t\t\t\t\tvar uvC = uvs[ 2 ];\n\n\t\t\t\t\t\t// AB\n\n\t\t\t\t\t\tif ( edge === 0 ) {\n\n\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\tuvM.lerp( uvB, 0.5 );\n\n\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvM.clone(), uvC.clone() ];\n\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t\t// BC\n\n\t\t\t\t\t\t} else if ( edge === 1 ) {\n\n\t\t\t\t\t\t\tvar uvM = uvB.clone();\n\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvC.clone(), uvA.clone() ];\n\n\t\t\t\t\t\t\t// AC\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceVertexUvs[ j ].push( uvsTriA, uvsTriB );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfaces.push( face );\n\n\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tfaceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgeometry.faces = faces;\n\tgeometry.faceVertexUvs = faceVertexUvs;\n\n};\n\nexport { TessellateModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}